import { addDays, format, isAfter, parseISO, startOfDay } from "date-fns";
import { cs } from "date-fns/locale";
import { Resend } from "resend";
import { z } from "zod";
import { db, orders } from "../db";

// Verify RESEND_API_KEY is set at module load time
if (!process.env.RESEND_API_KEY) {
	throw new Error(
		"RESEND_API_KEY environment variable is not set. Email functionality will not work.",
	);
}

// Helper function for date validation (at least 3 days from now)
const _isValidPickupDate = (dateString: string): boolean => {
	try {
		const selectedDate = parseISO(dateString);
		const minDate = addDays(startOfDay(new Date()), 3);
		return (
			isAfter(selectedDate, minDate) ||
			selectedDate.getTime() === minDate.getTime()
		);
	} catch {
		return false;
	}
};

// Zod schema for wedding tasting order validation
const weddingTastingSchema = z
	.object({
		name: z
			.string()
			.min(1, "Jm√©no je povinn√©")
			.min(2, "Jm√©no mus√≠ m√≠t alespo≈à 2 znaky"),
		email: z.string().min(1, "Email je povinn√Ω").email("Neplatn√Ω email"),
		phone: z
			.string()
			.min(1, "Telefon je povinn√Ω")
			.min(9, "Telefon mus√≠ m√≠t alespo≈à 9 ƒç√≠slic"),
		cakeBox: z.boolean(),
		sweetbarBox: z.boolean(),
		quantity: z.coerce.number().int().min(1, "Mno≈æstv√≠ mus√≠ b√Ωt alespo≈à 1"),
	})
	.refine(
		(data) => {
			// At least one box type must be selected
			return data.cakeBox || data.sweetbarBox;
		},
		{
			message:
				"Vyberte alespo≈à jednu ochutn√°vkovou krabiƒçku (dort nebo sweetbar)",
		},
	);

export interface SubmitWeddingTastingResult {
	success: boolean;
	message: string;
	orderId: string;
	orderDetails: {
		id: number;
		orderNumber: string;
		customerName: string;
		cakeBox: boolean;
		sweetbarBox: boolean;
		quantity: number;
	};
}

// Generate a unique order number
function generateOrderNumber(): string {
	const timestamp = Date.now();
	const random = Math.floor(Math.random() * 1000)
		.toString()
		.padStart(3, "0");
	return `WEDDING-${timestamp}-${random}`;
}

// Main function to be called from the API route
export async function submitWeddingTasting(
	formData: FormData,
): Promise<SubmitWeddingTastingResult> {
	// Extract form fields
	const orderData = {
		name: formData.get("name") as string,
		email: formData.get("email") as string,
		phone: formData.get("phone") as string,
		cakeBox: formData.get("cakeBox") === "true",
		sweetbarBox: formData.get("sweetbarBox") === "true",
		quantity: formData.get("quantity"),
	};

	// Validate with Zod
	const validationResult = weddingTastingSchema.safeParse(orderData);

	if (!validationResult.success) {
		const errorMessages = validationResult.error.issues.map(
			(err) => err.message,
		);
		throw new Error(errorMessages.join(", "));
	}

	const validated = validationResult.data;

	try {
		const orderNumber = generateOrderNumber();

		// Save order to database
		// Note: We set a default delivery date (7 days from now) since it's not collected in the form
		const defaultDeliveryDate = addDays(new Date(), 7);

		const [newOrder] = await db
			.insert(orders)
			.values({
				orderNumber,
				customerName: validated.name,
				customerEmail: validated.email,
				customerPhone: validated.phone,
				deliveryDate: defaultDeliveryDate,
				orderKind: "wedding_tasting",
				orderCake: validated.cakeBox,
				orderDessert: validated.sweetbarBox,
				cakeSize: validated.cakeBox ? `${validated.quantity}` : null,
				cakeFlavor: null,
				cakeMessage: null,
				dessertChoice: validated.sweetbarBox ? `${validated.quantity}` : null,
				tastingCakeBoxQty: validated.cakeBox ? validated.quantity : null,
				tastingSweetbarBoxQty: validated.sweetbarBox
					? validated.quantity
					: null,
				tastingNotes: null,
				shippingAddress: null,
				billingAddress: null,
				totalAmount: null,
				notes: null,
				createdById: null,
				updatedById: null,
			})
			.returning();

		// Send notification emails
		try {
			const resend = new Resend(process.env.RESEND_API_KEY);

			// Prepare order details
			let orderDetails = "Objednan√© polo≈æky:\n";

			if (validated.cakeBox) {
				orderDetails += `\n- ‚òë Ochutn√°vkov√° krabiƒçka dort≈Ø (mno≈æstv√≠: ${validated.quantity})`;
			}

			if (validated.sweetbarBox) {
				orderDetails += `\n- ‚òë Ochutn√°vkov√° krabiƒçka sweetbar (mno≈æstv√≠: ${validated.quantity})`;
			}

			// Send admin notification email
			await resend.emails.send({
				from: "Pand√≠ Dorty <pandidorty@danielsuchan.dev>",
				to: ["mr.sucik@gmail.com", "pandidorty@gmail.com"],
				subject: `üíç Nov√° svatebn√≠ ochutn√°vka #${newOrder.orderNumber} - ${validated.name}`,
				text: `
Nov√° objedn√°vka svatebn√≠ ochutn√°vky!

ƒå√≠slo objedn√°vky: ${newOrder.orderNumber}
Datum p≈ôijet√≠: ${format(new Date(), "dd.MM.yyyy HH:mm", { locale: cs })}

KONTAKTN√ç √öDAJE:
Jm√©no: ${validated.name}
Email: ${validated.email}
Telefon: ${validated.phone}

${orderDetails}
`,
			});

			// Send customer confirmation email
			await resend.emails.send({
				from: "Pand√≠ Dorty <pandidorty@danielsuchan.dev>",
				to: validated.email,
				subject: `üíç Potvrzen√≠ objedn√°vky svatebn√≠ ochutn√°vky #${newOrder.orderNumber}`,
				text: `
Dobr√Ω den ${validated.name},

dƒõkujeme za V√°≈° z√°jem o svatebn√≠ ochutn√°vku! T√≠mto potvrzujeme, ≈æe jsme Va≈°i objedn√°vku p≈ôijali a brzy se V√°m ozveme s dal≈°√≠mi detaily.

SHRNUT√ç OBJEDN√ÅVKY:
ƒå√≠slo objedn√°vky: ${newOrder.orderNumber}

${orderDetails}

Ozveme se V√°m co nejd≈ô√≠ve ohlednƒõ term√≠nu a dal≈°√≠ch podrobnost√≠.

Pokud budete m√≠t jak√©koliv dotazy, nev√°hejte n√°s kontaktovat na pandidorty@gmail.com.

S pozdravem,
T√Ωm Pand√≠ Dorty
`,
			});
		} catch (emailError) {
			console.error("‚ö†Ô∏è Error sending emails:", emailError);
			// Don't throw here - the order was saved successfully
		}

		// Return success response with real order data
		return {
			success: true,
			message:
				"Dƒõkujeme! Va≈°e objedn√°vka svatebn√≠ ochutn√°vky byla √∫spƒõ≈°nƒõ odesl√°na.",
			orderId: newOrder.orderNumber,
			orderDetails: {
				id: newOrder.id,
				orderNumber: newOrder.orderNumber,
				customerName: newOrder.customerName,
				cakeBox: validated.cakeBox,
				sweetbarBox: validated.sweetbarBox,
				quantity: validated.quantity,
			},
		};
	} catch (error) {
		console.error("üí• Error processing wedding tasting order:", error);
		throw new Error(
			"Do≈°lo k chybƒõ p≈ôi zpracov√°n√≠ objedn√°vky. Zkuste to pros√≠m pozdƒõji.",
		);
	}
}

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ObjednavkaImport } from './routes/objednavka'
import { Route as GalleryImport } from './routes/gallery'
import { Route as CakesImport } from './routes/cakes'
import { Route as IndexImport } from './routes/index'

// Create/Update Routes

const ObjednavkaRoute = ObjednavkaImport.update({
  id: '/objednavka',
  path: '/objednavka',
  getParentRoute: () => rootRoute,
} as any)

const GalleryRoute = GalleryImport.update({
  id: '/gallery',
  path: '/gallery',
  getParentRoute: () => rootRoute,
} as any)

const CakesRoute = CakesImport.update({
  id: '/cakes',
  path: '/cakes',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/cakes': {
      id: '/cakes'
      path: '/cakes'
      fullPath: '/cakes'
      preLoaderRoute: typeof CakesImport
      parentRoute: typeof rootRoute
    }
    '/gallery': {
      id: '/gallery'
      path: '/gallery'
      fullPath: '/gallery'
      preLoaderRoute: typeof GalleryImport
      parentRoute: typeof rootRoute
    }
    '/objednavka': {
      id: '/objednavka'
      path: '/objednavka'
      fullPath: '/objednavka'
      preLoaderRoute: typeof ObjednavkaImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/cakes': typeof CakesRoute
  '/gallery': typeof GalleryRoute
  '/objednavka': typeof ObjednavkaRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/cakes': typeof CakesRoute
  '/gallery': typeof GalleryRoute
  '/objednavka': typeof ObjednavkaRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/cakes': typeof CakesRoute
  '/gallery': typeof GalleryRoute
  '/objednavka': typeof ObjednavkaRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/cakes' | '/gallery' | '/objednavka'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/cakes' | '/gallery' | '/objednavka'
  id: '__root__' | '/' | '/cakes' | '/gallery' | '/objednavka'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CakesRoute: typeof CakesRoute
  GalleryRoute: typeof GalleryRoute
  ObjednavkaRoute: typeof ObjednavkaRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CakesRoute: CakesRoute,
  GalleryRoute: GalleryRoute,
  ObjednavkaRoute: ObjednavkaRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/cakes",
        "/gallery",
        "/objednavka"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/cakes": {
      "filePath": "cakes.tsx"
    },
    "/gallery": {
      "filePath": "gallery.tsx"
    },
    "/objednavka": {
      "filePath": "objednavka.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
